{"version":3,"sources":["calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","props","useState","x_value","setXValue","y_value","setYValue","result","setResult","operation","setOperation","useEffect","parseFloat","id","class","for","value","onChange","event","input","target","replace","changeXValue","changeYValue","changeOperation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RA+DeA,G,MA5DI,SAACC,GAAW,IAAD,EACCC,mBAAS,GADV,mBACrBC,EADqB,KACZC,EADY,OAECF,mBAAS,GAFV,mBAErBG,EAFqB,KAEZC,EAFY,OAGAJ,mBAAS,GAHT,mBAGrBK,EAHqB,KAGbC,EAHa,OAIMN,mBAAS,KAJf,mBAIrBO,EAJqB,KAIVC,EAJU,KAM5BC,qBAAU,WACK,KAAbF,GAAoBD,EAAUI,WAAWT,GAAWS,WAAWP,IAClD,KAAbI,GAAoBD,EAAUI,WAAWT,GAAWS,WAAWP,IAClD,KAAbI,GAAoBD,EAAUI,WAAWT,GAAWS,WAAWP,IAClD,KAAbI,GAAoBD,EAAUI,WAAWT,GAAWS,WAAWP,MAC9D,CAACF,EAASE,EAASI,IAmBtB,OACE,qBAAKI,GAAG,aAAR,SACE,2BAAUC,MAAM,MAAhB,UACE,iDACA,sBAAKA,MAAM,SAAX,UACE,uBAAOC,IAAI,UAAX,sBAAqC,uBACrC,uBAAOF,GAAG,UAAUG,MAAOb,EAASc,SAAU,SAACC,GAAD,OAvBjC,SAACA,GACpB,IAAIC,EAAQD,EAAME,OAAOJ,MACzBG,EAAQA,EAAME,QAAQ,IAAI,KAC1BjB,EAAUe,GAoBqDG,CAAaJ,SAExE,sBAAKJ,MAAM,SAAX,UACE,uBAAOC,IAAI,UAAX,sBAAqC,uBACrC,uBAAOF,GAAG,UAAUG,MAAOX,EAASY,SAAU,SAACC,GAAD,OArBjC,SAACA,GACpB,IAAIC,EAAQD,EAAME,OAAOJ,MACzBG,EAAQA,EAAME,QAAQ,IAAI,KAC1Bf,EAAUa,GAkBqDI,CAAaL,MAAS,0BAEjF,sBAAKJ,MAAM,SAAX,UACE,uBAAOC,IAAI,YAAX,wBAAyC,uBACzC,yBAAQF,GAAG,YAAYI,SAAU,SAACC,GAAD,OAnBjB,SAACA,GACvB,IAAMC,EAAQD,EAAME,OAAOJ,MAC3BN,EAAaS,GAiBqCK,CAAgBN,IAA5D,UACE,wBAAQF,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,uBAGJ,sBAAKF,MAAM,SAAX,UACE,uBAAOC,IAAI,SAAX,qBAAmC,uBACnC,uBAAOF,GAAG,SAASG,MAAOT,cC9CrBkB,EAPH,WAEV,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a9437e04.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './calculator.css';\r\n\r\nconst Calculator = (props) => {\r\n  const [x_value, setXValue] = useState(0);\r\n  const [y_value, setYValue] = useState(0);\r\n  const [result, setResult] = useState(0);\r\n  const [operation, setOperation] = useState('+')\r\n\r\n  useEffect(() => {\r\n    operation == '+' && setResult(parseFloat(x_value) + parseFloat(y_value));\r\n    operation == '-' && setResult(parseFloat(x_value) - parseFloat(y_value));\r\n    operation == '*' && setResult(parseFloat(x_value) * parseFloat(y_value));\r\n    operation == '/' && setResult(parseFloat(x_value) / parseFloat(y_value));\r\n  }, [x_value, y_value, operation]);\r\n\r\n  const changeXValue = (event) => {\r\n    let input = event.target.value;\r\n    input = input.replace(',','.')\r\n    setXValue(input);\r\n  }\r\n\r\n  const changeYValue = (event) => {\r\n    let input = event.target.value;\r\n    input = input.replace(',','.')\r\n    setYValue(input);\r\n  }\r\n\r\n  const changeOperation = (event) => {\r\n    const input = event.target.value;\r\n    setOperation(input);\r\n  }\r\n\r\n  return (\r\n    <div id='calculator'>\r\n      <fieldset class='row'>\r\n        <legend>Kalkulator:</legend>\r\n        <div class='inputs'>\r\n          <label for=\"x_value\">X value:</label><br />\r\n          <input id='x_value' value={x_value} onChange={(event) => changeXValue(event)}/>\r\n        </div>\r\n        <div class='inputs'>\r\n          <label for=\"y_value\">Y value:</label><br />\r\n          <input id='y_value' value={y_value} onChange={(event) => changeYValue(event)}/><br />\r\n        </div>\r\n        <div class='inputs'>\r\n          <label for=\"operation\">Operation:</label><br />\r\n          <select id=\"operation\" onChange={(event) => changeOperation(event)}>\r\n            <option value=\"+\">X+Y</option>\r\n            <option value=\"-\">X-Y</option>\r\n            <option value=\"*\">X*Y</option>\r\n            <option value=\"/\">X/Y</option>\r\n          </select>\r\n        </div>\r\n        <div class='inputs'>\r\n          <label for=\"result\">Result:</label><br />\r\n          <input id='result' value={result}/>\r\n        </div>\r\n      </fieldset>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calculator;\r\n","import './App.css';\nimport Calculator from './calculator/Calculator.js'\n\nconst App = () => {\n\n  return (\n    <Calculator />\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}